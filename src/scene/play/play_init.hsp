#deffunc start_play
	chdir dir_default+"\\songs"
	JStickSearchID 0,joylist
	length_joylist=stat
	gosub *joyinit
	if((iscmdline=0)|(iscourse=1)){
		chdir dir_default+"\\songs"
		dirlist filelistdir,csongdir,5
		if(stat=0){
			dialog lang.2.13/*"指定された譜面ファイルが見つかりません。"*/
			chdir dir_default+"\\songs"
			scene=SCENE_SELECT
			return
		}
		chdir csongdir
	}else{
		chdir getpath(cnotesfile,32)
	}

	// 判定タイミング調整のconfig上の値から実際の値を計算
	if(auto=1){
		// オートの場合は判定調整0として計算する
		judgedelay = visual_offset
		globaloffset = globaloffset_config - visual_offset
		analogdelay = judgedelay + analogdelay_config
		soundfx_delay = soundfx_delay_config + visual_offset
	}else{
		judgedelay = judgedelay_config + visual_offset
		globaloffset = globaloffset_config - visual_offset
		analogdelay = judgedelay + analogdelay_config
		soundfx_delay = soundfx_delay_config + visual_offset
	}

	font lang.0.1,getsize(18)
	if(imeget()=1):imeset 0

	// ゲームプレイ関連の変数初期化
	initGamePlayVariables

	// 譜面データ関連の変数初期化
	initChartVariables

	// MIRROR/RANDOMの準備
	prepareTurnOptions

	// ノーツ種別ごとのモード(ON/OFF/HIDE/AUTO)の準備
	prepareModeOptions

	gsel 0

	// 連番出力用のImage生成
	if(output=1){
		alCreateImage 50,ginfo_winx,ginfo_winy
	}

	// 譜面ファイルが見つからなければ選曲画面へ戻る
	exist cnotesfile
	if(strsize<=0){
		dialog lang.2.13/*"指定された譜面ファイルが見つかりません。"*/
		if(iscmdline=1):end
		chdir dir_default+"\\songs"
		scene=SCENE_SELECT
		return
	}

	// 譜面ファイルの内容を読み込み
	loadKSHChartFile

	// 譜面のパラメータ内容の処理
	// (BPM変化やユーザー定義エフェクト一覧などもここで読み込む)
	parseKSHChartParamLines

	// 直角音を読み込む
	loadLaserSlamSounds csongver_int

	// 音量が100より大きい場合はVolumeエフェクトを適用
	if(csongvol>100){
		dim hVolFX,length(mid)
		foreach mid
			hVolFX.cnt=BASS_ChannelSetFX(mid.cnt,0x10003,5)
			dim volfx,2
			volfx=0,tofloat(double(csongvol)/100.0f)
			BASS_FXSetParameters hVolFX.cnt,volfx
		loop
		dim hVolFX,swaudionum
		repeat swaudionum
			hVolFX_sw.cnt=BASS_ChannelSetFX(mid_sw.cnt,0x10003,5)
			dim volfx,2
			volfx=0,tofloat(double(csongvol)/100.0f)
			BASS_FXSetParameters hVolFX_sw.cnt,volfx
		loop
		csongvol=100
	}

	// ハイスピ設定用のBPM計算(最頻値など)
	prepareReferenceBPMsForHiSpeed

	// コマンドラインでの開始地点指定を計算
	if(cmdline_from!=0){
		cmdline_from=b2c(cmdline_from)
	}

	// プレイ前の画面の表示
	startSplashScreen

	// プレイ前の画面でEscキーが押された場合は選曲画面へ戻る(もしくはコースモードを中断)
	courseendfl=0
	if(endfl2=1){
		if(((auto=1)|(adjmode=1))&(length(kmode)=3)){
			shortmode=kmode.0
			longmode=kmode.1
			analogmode=kmode.2
		}
		if((iscourse=0)|(coursenow=0)){
			BASS_ChannelSlideAttribute selenterid,2,0.0,250
			chdir dir_default+"\\songs"
			refreshsonglistoff=1
			scene=SCENE_SELECT
		}else{
			BASS_ChannelSlideAttribute selenterid,2,0.0,250
			endfl2=0
			autodemo=0
			courseendfl=1
		}
	}

	// 画面を黒で塗りつぶし
	gsel 0
	color 0,0,0
	boxf

	// 選曲画面に戻る前にLOADING表示を描画
	if(endfl2=1){
		pos 0,0
		gcopy 29,0,0,scrsize_w,scrsize_h
	}
	alCopyImageToScreen IMG_LOADING,0,scrsize_w-getsize(208),getsize(442)
	redraw 1:await 7:redraw 0

	// 選曲画面に戻る場合は現在のシーンを中断
	if(endfl2=1){
		endfl2=0
		return
	}

	// 譜面に指定された動画ファイルの読み込み(MCI)
	loadChartVideo

	// ユーザー定義エフェクトの初期化
	initCustomAudioEffects

	// 譜面内容の読み込み処理
	parseKSHChartBody

	// VSTエフェクトの適用
	// (parseKSHChartBodyの後で呼ぶのは、譜面に各エフェクトが含まれているかのチェックが入るため)
	applyVSTEffects

	// 回転の適用
	spinfcnt=0
	sprfcnt=0
	repeat analognum
		if((analog.cnt.2<=UNIT_MEASURE_32)&(analog.cnt.3!=analog.cnt.4)){
			stat1=cnt
			repeat spinnum-spinfcnt,spinfcnt
				if(spin.cnt.1<analog.stat1.1):spinfcnt=cnt
				if((spin.cnt.1=analog.stat1.1)&(sgn(analog.stat1.4-analog.stat1.3)=((spin.cnt.0-spin.cnt.0/2*2)*2-1))&(spin.cnt.0<10)){
					analog.stat1.9=cnt
					spin.cnt.0+=10
					break
				}
			loop
			repeat sprnum
				if(spr.cnt.1<analog.stat1.1):sprfcnt=cnt
				if((spr.cnt.1=analog.stat1.1)&(sgn(analog.stat1.4-analog.stat1.3)=((spr.cnt.0-spr.cnt.0/2*2)*2-1))&(spr.cnt.0<10)){
					analog.stat1.9=-cnt-2
					spr.cnt.0+=10
					break
				}
			loop
		}
	loop
	repeat spinnum
		if(spin.cnt.0>=10){
			spin.cnt.0-=10
		}else:spin.cnt.0=-1
	loop
	repeat sprnum
		if(spr.cnt.0>=10){
			spr.cnt.0-=10
		}else:spr.cnt.0=-1
	loop
	// 直角音の種類の適用
	repeat analoganjnum
		stat1=cnt
		repeat ansenum
			if(anse.cnt.0=analog.(analoganj.stat1.1).1){
				analoganj.stat1.4=anse.cnt.1
				break
			}
		loop
	loop
	// レーザー移動幅の適用
	repeat 2
		cnt2=cnt
		repeat max(analoggrmax.0,analoggrmax.1)+1
			anagrran.cnt2.cnt=1
		loop
	loop
	repeat anarannum
		cnt2=cnt
		repeat analognum
			if((anaran.cnt2.0=analog.cnt.0)&(anaran.cnt2.1=analog.cnt.1)&(analog.cnt.5=1)){
				anagrran.(analog.cnt.0).(analoggr.cnt)=anaran.cnt2.2
			}
			if((analog.cnt.1>=anaran.cnt2.1)&(analog.cnt.0=anaran.cnt2.0)):break
		loop
	loop
	if(adjmode=1){
		repeat
			note.notenum.0=2
			note.notenum.1=int(double(cnt)*UNIT_MEASURE_4)
			note.notenum.2=0
			note.notenum.3=c2t(note.notenum.1)
			note.notenum.4=note.notenum.3
			note.notenum.5=-1
			if(note.notenum.3>mlength):break
			if(np.3!=-1){
				note.(np.3).5=notenum
			}
			np.3=notenum
			notenum++
			stat4+=6
			stat4_2+=200
		loop
	}
	gosub *minfoprepare
	// ゲージ増減量の決定
	if(csongtotal<100){
		gaugemax=int(double(stat4)*20)
		if(gaugemax<125000){
			gaugemax=(gaugemax*gaugemax/125000)/5+gaugemax*4/5
		}
		if(gaugemax>100000){
			gaugemax=100000+(gaugemax-100000)/2
		}
		gaugemax=min(gaugemax,125000)
	}else{
		gaugemax=int(double(stat4_2)*100/csongtotal)
	}
	if(gaugemax>stat4_2):gaugemax=stat4_2
	if(gaugemax=0):gaugemax=1
	csongtotal=stat4_2*100/gaugemax
	// 無駄な確保をやめる
	sdim d,1
	dim kar,notenum,8
	repeat notenum
		cnt2=cnt
		repeat 8
			kar.cnt2.cnt=note.cnt2.cnt
		loop
	loop
	dim note,notenum,8
	repeat notenum
		cnt2=cnt
		repeat 8
			note.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,notefxnum,8
	repeat notefxnum
		cnt2=cnt
		repeat 8
			kar.cnt2.cnt=notefx.cnt2.cnt
		loop
	loop
	dim notefx,notefxnum,8
	repeat notefxnum
		cnt2=cnt
		repeat 8
			notefx.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,notesejnum,4
	repeat notesejnum
		cnt2=cnt
		repeat 4
			kar.cnt2.cnt=notesej.cnt2.cnt
		loop
	loop
	dim notesej,notesejnum,4
	repeat notesejnum
		cnt2=cnt
		repeat 4
			notesej.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,longjnum,8
	repeat longjnum
		cnt2=cnt
		repeat 8
			kar.cnt2.cnt=longj.cnt2.cnt
		loop
	loop
	dim longj,longjnum,8
	repeat longjnum
		cnt2=cnt
		repeat 8
			longj.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,shljnum,8
	repeat shljnum
		cnt2=cnt
		repeat 8
			kar.cnt2.cnt=shlj.cnt2.cnt
		loop
	loop
	dim shlj,shljnum,8
	repeat shljnum
		cnt2=cnt
		repeat 8
			shlj.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,analogjnum,4
	repeat analogjnum
		cnt2=cnt
		repeat 4
			kar.cnt2.cnt=analogj.cnt2.cnt
		loop
	loop
	dim analogj,analogjnum,5
	repeat analogjnum
		cnt2=cnt
		repeat 4
			analogj.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,analoganjnum,6
	repeat analoganjnum
		cnt2=cnt
		repeat 6
			kar.cnt2.cnt=analoganj.cnt2.cnt
		loop
	loop
	dim analoganj,analoganjnum,6
	repeat analoganjnum
		cnt2=cnt
		repeat 6
			analoganj.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,2,max(analogturnnum.0,analogturnnum.1)
	repeat max(analogturnnum.0,analogturnnum.1)
		kar.0.cnt=analogturn.0.cnt
		kar.1.cnt=analogturn.1.cnt
	loop
	dim analogturn,2,max(analogturnnum.0,analogturnnum.1)
	repeat max(analogturnnum.0,analogturnnum.1)
		analogturn.0.cnt=kar.0.cnt
		analogturn.1.cnt=kar.1.cnt
	loop
	dim noteresult,notenum
	dim noteresult,notenum
	dim kar,analognum,10
	repeat analognum
		cnt2=cnt
		repeat 10
			kar.cnt2.cnt=analog.cnt2.cnt
		loop
	loop
	dim analog,analognum,10
	repeat analognum
		cnt2=cnt
		repeat 10
			analog.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,analognum
	repeat analognum
		kar.cnt=analoggr.cnt
	loop
	dim analoggr,analognum
	repeat analognum
		analoggr.cnt=kar.cnt
	loop
	dim kar,analognum
	repeat analognum
		kar.cnt=analogbuf.cnt
	loop
	dim analogbuf,analognum
	repeat analognum
		analogbuf.cnt=kar.cnt
	loop
	dim kar,spinnum,4
	repeat spinnum
		cnt2=cnt
		repeat 4
			kar.cnt2.cnt=spin.cnt2.cnt
		loop
	loop
	dim spin,spinnum,4
	repeat spinnum
		cnt2=cnt
		repeat 4
			spin.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,sprnum,6
	repeat sprnum
		cnt2=cnt
		repeat 6
			kar.cnt2.cnt=spr.cnt2.cnt
		loop
	loop
	dim spr,sprnum,6
	repeat sprnum
		cnt2=cnt
		repeat 6
			spr.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,tiltnum,2
	repeat tiltnum
		cnt2=cnt
		repeat 2
			kar.cnt2.cnt=tilt.cnt2.cnt
		loop
	loop
	dim tilt,tiltnum,5//6
	repeat tiltnum
		cnt2=cnt
		repeat 2
			tilt.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,bpmlnum,3
	repeat bpmlnum
		cnt2=cnt
		repeat 3
			kar.cnt2.cnt=bpml.cnt2.cnt
		loop
	loop
	dim bpml,bpmlnum,3
	repeat bpmlnum
		cnt2=cnt
		repeat 3
			bpml.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,beatlnum,3
	repeat beatlnum
		cnt2=cnt
		repeat 3
			kar.cnt2.cnt=beatl.cnt2.cnt
		loop
	loop
	dim beatl,beatlnum,3
	repeat beatlnum
		cnt2=cnt
		repeat 3
			beatl.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,anagainnum,2
	repeat anagainnum
		cnt2=cnt
		repeat 2
			kar.cnt2.cnt=anagain.cnt2.cnt
		loop
	loop
	dim anagain,anagainnum,3
	repeat anagainnum
		cnt2=cnt
		repeat 2
			anagain.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,anafilnum,2
	repeat anafilnum
		cnt2=cnt
		repeat 2
			kar.cnt2.cnt=anafil.cnt2.cnt
		loop
	loop
	dim anafil,anafilnum,3
	repeat anafilnum
		cnt2=cnt
		repeat 2
			anafil.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,anvolnum,3
	repeat anvolnum
		cnt2=cnt
		repeat 3
			kar.cnt2.cnt=anvol.cnt2.cnt
		loop
	loop
	dim anvol,anvolnum,3
	repeat anvolnum
		cnt2=cnt
		repeat 3
			anvol.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,stpnum,2
	repeat stpnum
		cnt2=cnt
		repeat 2
			kar.cnt2.cnt=stp.cnt2.cnt
		loop
	loop
	dim stp,stpnum,2
	repeat stpnum
		cnt2=cnt
		repeat 2
			stp.cnt2.cnt=kar.cnt2.cnt
		loop
	loop
	dim kar,1
	if(gaugemax<=0):gaugemax=1
	is_scene_initial_frame=0
	dim notefcnt,6
	dim analogfcnt,2
	dim jfcnt,6
	notejfcnt=0
	dim notefxfcnt,2
	dim shljfcnt,4
	dim longjfcnt,2
	dim analogjfcnt,2
	dim analogjfcnt2,2
	dim analogefffcnt,2
	dim analogturnfcnt,2
	analoganjfcnt=0
	anagainfcnt=0
	anafilfcnt=0
	anafilfcnt2=0
	anvolfcnt=0
	notetickfcnt=0
	rotatefcnt=0
	bpm=bpml.0.1
	nscore=0
	lscore=0
	analogscore=0
	critical=0
	near=0
	errorn=0
	fast=0
	slow=0
	ddim tiltrnow,1
	ddim tiltrnowp,1
	ddim tiltnowstart,1
	tiltnow=0
	tiltnowp=0
	tiltnowslidet=1
	tiltnowstart2=0
	ddim romaxstat,3
	romaxstat.0=maxf(romax*(tiltnowp\3=0)+rotatemax*(tiltnowp\3=1)+rotatemax2*(tiltnowp\3=2),0.1)
	romaxstat.1=maxf(romax*(tiltnow\3=0)+rotatemax*(tiltnow\3=1)+rotatemax2*(tiltnow\3=2),0.1)
	romaxstat.2=romaxstat.1
	tiltrnow=romaxstat.2
	tiltnowt=-50000
	tiltnowstart=tiltrnow
	filtertypep=0
	filtertypep2=0
	canagainp=0
	canagainp2=0
	retr_beat=-1
	retr_beatp=-2
	sich_trigger=0
	dim user_trigger,max(userfxnum,1)
	sich_beat=-1
	sich_beatp=-2
	dim user_beat,max(userfxnum,1)
	dim user_beatp,max(userfxnum,1)
	retr_now=0
	gate_now=0
	wobble_now=0
	dim echo_trigger,2
	dim echo_now,2
	c2bnow=0
	c2bnowp=0
	c2bnowp_50ms=0
	layernowp=-6
	bgnowp=-1
	dim feffectnow,2
	dim feffectp,2
	dim feffectnow_real,2
	dim feffectp_real,2
	feffectp_real=-1,-1
	dim feffectparam,2
	dim feffectparam2,2
	ddim sync,1
	zure=0
	zuremax=0
	d3timerp=d3timer()
	repeat anagainnum
		anagain.cnt.2=c2t(anagain.cnt.0)
	loop
	repeat anafilnum
		anafil.cnt.2=c2t(anafil.cnt.0)
	loop
	repeat analogjnum
		analogj.cnt.4=c2t(analogj.cnt.1)
	loop
	repeat anvolnum
		anvol.cnt.2=c2t(anvol.cnt.0)
	loop
	repeat spinnum
		spin.cnt.4=c2t(spin.cnt.1)
	loop
	repeat tiltnum
		tilt.cnt.2=c2t(tilt.cnt.0)
	loop
	// KEEP時の傾きを事前に計算
	repeat tiltnum
		cnt2=cnt
		ddim ro,2
		repeat analognum
			if((analog.cnt.1<=tilt.cnt2.0-2)&(analog.cnt.1+analog.cnt.2>tilt.cnt2.0-2)){
				if(analog.cnt.2<=UNIT_MEASURE_32){
					if(analog.cnt.8=0){
						if(analog.cnt.0=0){
							ro.0+=double(analog.cnt.4)*20
						}else{
							ro.1-=double(abs(analog.cnt.4-50))*20
						}
					}
				}else{
					if(analog.cnt.0=0){
						ro.0+=double(analog.cnt.3)*20+double(analog.cnt.4-analog.cnt.3)*20*(analog.cnt.2-(analog.cnt.1+analog.cnt.2-(tilt.cnt2.0-2)))/analog.cnt.2
					}else{
						ro.1-=double(abs(analog.cnt.3-50))*20+double(abs(analog.cnt.4-50)-abs(analog.cnt.3-50))*20*(analog.cnt.2-(analog.cnt.1+analog.cnt.2-(tilt.cnt2.0-2)))/analog.cnt.2
					}
				}
			}
		loop
		tilt.cnt.4=int(round(ro.0+ro.1))
	loop
	repeat spinnum
		spin.cnt.3=c2t(spin.cnt.1+spin.cnt.2)-spin.cnt.4
	loop
	shortnum=0
	lshnum=0
	repeat notenum
		if((note.cnt.2=0)&(((note.cnt.0<=3)&(shortmode!=mode_off))|((note.cnt.0>3)&(longmode!=mode_off)))){
			if(note.cnt.0<=3){
				shortnum++
			}else{
				lshnum++
			}
		}
	loop
	ddim ro,2
	t_moex=-offset-T_MOEX_DELAY-globaloffset // t_moex: expected music offset time
	if((cmov=0)&(vmov=1)&(output=0)){
		stat1=-voffset-T_MOEX_DELAY-globaloffset
		if(stat1<0):mci "seek v to 0"
	}
	gsel 0
	redraw 0
	hgreset
	selcang
	objsetf2 0,-M_PI/12,0.0f
	selcpos
	objsetf2 1,-45.0f,366.0f
	buffer 156,82/ra,7/ra
	pos 0,0
	gzoom 82/ra,7/ra,1,0,1,82/ra,7
	buffer 157,82/ra,7/ra
	pos 0,0
	gzoom 82/ra,7/ra,42,0,1,82/ra,7
	gsel 0

	// 各種グラフィックの読み込み
	loadUIGraphics
	loadBGGraphics
	loadLayerGraphics
	loadLaneGraphics
	loadJudgmentLineGraphics
	loadJudgmentAnimGraphics
	loadLaserCursorGraphics

	// 各種オブジェクトの生成
	initLaneObject
	initJudgmentLineObject
	initJudgmentAnimObject
	initLaserCursorObjects

	// カメラの生成
	initCamera

	stat1=refstr
	split stat1,",",fvstat
	fv1=double(fvstat.0)
	mdelayt=0
	mrepeat=0
	minforefresh=1

	bpmp=bpm
	dim peffstatap,2
	peffstat2p=0
	swaudionow=-1
	swaudionow_resultp=-1
	mtp=0
	gsel 0
	if((analoginput=2)&(analogmode=mode_on)){
		if(hidem=1):mouse -1,-1
		mouse defx,defy
	}
	dim sliderp,2
	if(analoginput=4){
		repeat 2
			cnt0=cnt
			sliderp.cnt=0
			repeat length_joylist
				joyGetPosEx joystat2,joylist.cnt
				sliderp.cnt0+=joystat2.(4+(cnt0^analogsw))
			loop
		loop
	}
	cnowp=0
	cnowfxp=0
	cnowfxp_50ms=0
	bpmfxp=-1
	slider=0
	dim arstat,8,3
	dim chobufp,4
	plfl=1
	font lang.0.1,getsize(18)
	hgsettime -3400-1000*(cmovfile!=""),INT_MAX
	ts_bass=0
	ddim timingdif,1
	timingdif=-50000f
	
	if(cmdline_from>0){
		hgsettime max(c2t(cmdline_from)-1000,0),INT_MAX
	}
	
	csongfile_empty=(csongfile.0="")|(csongfile.0=".mp3")
	scrsize480=double(scrsize_h)/480

	// GameSystemの生成
	game_system = 0
	if (CreateGameSystem(cnotesfile, double(t_moex), varptr(game_system)) == 0) {
		dialog lang.2.5/*"譜面データの読み込み中にエラーが発生しました。"*/
		chdir dir_default+"\\songs"
		scene=SCENE_SELECT
		return // CreateGameSystemでfalseが返された場合、DestroyGameSystemを明示的に呼ぶ必要はない
	}

	// playシーンのメインループ
	// (hgimg3の使用や連番出力の関係で時間待ちの仕様が他シーンと異なるため、別途ここでループ)
	repeat
		on_update_play
		if (stat = 0) {
			break
		}
	loop

	return